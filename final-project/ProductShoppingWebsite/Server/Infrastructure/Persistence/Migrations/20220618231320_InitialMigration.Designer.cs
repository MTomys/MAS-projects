// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductShoppingWebsite.Server.Infrastructure.Persistence;

#nullable disable

namespace ProductShoppingWebsite.Server.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220618231320_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<int>("AccountOwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UniqueAccountIdentificator")
                        .HasColumnType("int");

                    b.Property<string>("account_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountOwnerId")
                        .IsUnique();

                    b.HasIndex("UniqueAccountIdentificator")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("account_type").HasValue("account_base");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminAccountAccountId")
                        .HasColumnType("int");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ServiceUserId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueAdminIdentificator")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdminAccountAccountId");

                    b.HasIndex("UniqueAdminIdentificator")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.BannedSeller", b =>
                {
                    b.Property<int>("BannedSellerEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannedSellerEntityId"), 1L, 1);

                    b.Property<DateTime>("ArchivizationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BanReasonDescription")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("BannedSellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBan")
                        .HasColumnType("datetime");

                    b.Property<int>("DecisionAdmin")
                        .HasColumnType("int");

                    b.HasKey("BannedSellerEntityId");

                    b.HasIndex("BannedSellerId")
                        .IsUnique();

                    b.ToTable("BannedSellers");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerNickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(319)
                        .HasColumnType("nvarchar(319)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ServiceUserId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueCustomerIdentificator")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId");

                    b.HasIndex("UniqueCustomerIdentificator")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UniqueOrderIdentificator")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("UniqueOrderIdentificator")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductTypesInString")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QuantityType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("ServicePerformer")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ServicePerformerContactInfo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UniqueProductIdentificator")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("UniqueProductIdentificator")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"), 1L, 1);

                    b.Property<int>("IssuerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReportDescription")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("ReportedSellerId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueReportIdentificator")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("ReportedSellerId");

                    b.HasIndex("UniqueReportIdentificator")
                        .IsUnique();

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellerId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SellerNickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServiceUserId")
                        .HasColumnType("int");

                    b.Property<int>("UniqueSellerIdentificator")
                        .HasColumnType("int");

                    b.HasKey("SellerId");

                    b.HasIndex("UniqueSellerIdentificator")
                        .IsUnique();

                    b.ToTable("Sellers", (string)null);
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.AuthorizedAccount", b =>
                {
                    b.HasBaseType("ProductShoppingWebsite.Shared.Entities.Account");

                    b.Property<DateTime>("AuthorizationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthorizationMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasDiscriminator().HasValue("authorized_account");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.UnauthorizedAccount", b =>
                {
                    b.HasBaseType("ProductShoppingWebsite.Shared.Entities.Account");

                    b.HasDiscriminator().HasValue("unauthorized_account");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.AdminAccount", b =>
                {
                    b.HasBaseType("ProductShoppingWebsite.Shared.Entities.AuthorizedAccount");

                    b.HasDiscriminator().HasValue("admin_account");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Account", b =>
                {
                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Seller", "AccountOwner")
                        .WithOne("Account")
                        .HasForeignKey("ProductShoppingWebsite.Shared.Entities.Account", "AccountOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountOwner");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Admin", b =>
                {
                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("ProductShoppingWebsite.Shared.Entities.AdminAccount", "AdminAccount")
                        .WithMany()
                        .HasForeignKey("AdminAccountAccountId");

                    b.Navigation("Account");

                    b.Navigation("AdminAccount");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.BannedSeller", b =>
                {
                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Seller", "Seller")
                        .WithOne()
                        .HasForeignKey("ProductShoppingWebsite.Shared.Entities.BannedSeller", "BannedSellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Customer", b =>
                {
                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Order", b =>
                {
                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Customer", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("ProductShoppingWebsite.Shared.Entities.Order", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Product", b =>
                {
                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Seller", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ProductShoppingWebsite.Shared.Entities.ProductRating", "ProductRating", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("RatedById")
                                .HasColumnType("int");

                            b1.Property<DateTime>("RatingDate")
                                .HasColumnType("datetime");

                            b1.Property<string>("RatingDescription")
                                .IsRequired()
                                .HasMaxLength(1500)
                                .HasColumnType("nvarchar(1500)");

                            b1.Property<double>("RatingScore")
                                .HasColumnType("float");

                            b1.HasKey("ProductId");

                            b1.HasIndex("RatedById");

                            b1.ToTable("ProductRatings", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasOne("ProductShoppingWebsite.Shared.Entities.Customer", "RatedBy")
                                .WithMany()
                                .HasForeignKey("RatedById")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("RatedBy");
                        });

                    b.Navigation("ProductRating");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Report", b =>
                {
                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Customer", "Issuer")
                        .WithMany("Reports")
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductShoppingWebsite.Shared.Entities.Seller", "ReportedSeller")
                        .WithMany()
                        .HasForeignKey("ReportedSellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");

                    b.Navigation("ReportedSeller");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("ProductShoppingWebsite.Shared.Entities.Seller", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
